
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## load packages, functions, libraries, parameters
> rm(list=ls(all=T))
> options(warn=-1)
> .libPaths(c("library",.libPaths())) #custom lib path
> # Libs
> library("R.utils")    #integer-binary-conversion
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.6.1 (2014-01-04) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.18.0 (2014-02-22) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, gc, load, save

R.utils v1.34.0 (2014-10-07) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, parse, warnings

> library("data.table") #faster group-wise operations
> library("foreach")    #to run parallel processing
> library("parallel")   #to detect number of cores
> library("mail")       #to send emails from R
> # Srcs
> source("fsim.r")
> source("fprClass.r")
Loading required package: coda
Loading required package: lattice
Loading required package: MASS
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2015 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##
> source("fprModels.r")
> source("flikMLcci.r")
> source("fpresim.r")
> source("fcounts.r")
> 
> 
> # Parameter values
> # doubt/learning = round(exp(seq(0,5,.5)))
> # prior_cci = c(0, 10^-6, seq(.1,.9,.1), .99, 1-10^-6, 1)
> # random seed = 34
> 
> # Experiment switch
> # 1 = Exp. 1; 3 = Exp. 1 when CCI holds
> # 2 = Exp. 2; 4 = Exp. 2 when CCI holds
> which = 3
> 
> ## Parameter
> P = list(
+    e     = which,
+    p_cci = c(0, 10^-6, seq(.1,.9,.1), .99, 1-10^-6, 1),  #prior on CCI
+    delta = round(exp(seq(0,5,.5))),  #conservatism
+    h     = 1,            #initial hyper parameter [scalar]
+    n_r   = 100000,       #number of MC runs
+    s     = 34            #random seed - for replicability
+ )
> sprintf("%.6f",P$p_cci)
 [1] "0.000000" "0.000001" "0.100000" "0.200000" "0.300000" "0.400000"
 [7] "0.500000" "0.600000" "0.700000" "0.800000" "0.900000" "0.990000"
[13] "0.999999" "1.000000"
> 
> ## set paths
> ddir = "//mnt//bigdata//janajaData" # alternative: "../4-Data")
> odir = ddir      #output directory
> cat("odir: ", odir)
odir:  //mnt//bigdata//janajaData> 
> 
> ## assign cpu cores
> nc = detectCores() #number of cores
> 
> ## Platform switch
> if(.Platform$OS.type == "windows"){
+   library("doParallel")
+   cl = makeCluster(nc)
+   registerDoParallel(cl)
+   cat("Registered ", nc, " Cores")
+ } else if(.Platform$OS.type %in% c("mac","unix")){
+   library("doMC")
+   #cl = makeCluster(nc) #dont know if doMC needs this
+   registerDoMC(cores=nc)
+   if(getDoParWorkers()!=nc) { stop("doMC does not work with all cores") }
+   cat("Registered ", nc, " Cores")
+ }
Loading required package: iterators
Registered  16  Cores> 
> 
> 
> ## Data
> # Data to simulate 
> DT = as.data.table(fread(file.path(ddir,paste0("DI",which,"_data.csv")), select=c("i","t","e")))
> setcolorder(DT,c("i","t","e"))
> DT #print 5 rows to check
       i  t    e
   1:  1  1 000A
   2:  1  2 000B
   3:  1  3 001A
   4:  1  4 111A
   5:  1  5 111A
  ---           
1496: 30 46 111A
1497: 30 47 111A
1498: 30 48 000A
1499: 30 49 111A
1500: 30 50 000A
> # Generate counts
> DT = fpresim(DT)
> 
> ## Index data-set by number of cores
> ni    = length(unique(DT$i)) #number of individuals
> ids   = DT[, max(t), by=i][order(V1)]$i #sort sbj. ids by number of trials
> cores = tail(rep(c(1:nc,nc:1),ceiling(ni/nc)),ni) #to assign extreme # of trials to same core: <1,1,2,2,1>
> ids   = lapply(1:nc, function(x) ids[cores==x])
> for (j in 1:nc){  DT[i %in% ids[[j]], "cores" := j] } # variable cores
> setkey(DT,cores,i,t) #sort by cores
> 
> # Paralell processing
> finalRowOrderMatters = FALSE #FALSE can be faster
> system.time(
+   foreach(x = 1:nc, .combine="rbind", .inorder=finalRowOrderMatters) %dopar% {
+     source("fsim.r")
+     source("fprClass.r")
+     source("fprModels.r")
+     source("flikMLcci.r")
+     library("R.utils")
+     library("data.table")
+     RES = fsim(DT[.(x)], P)
+     write.table(RES, file.path(odir,paste(x,".csv",sep="")), row.names=F, sep=";")
+   }
+ )
      user     system    elapsed 
175636.047   1898.683  12761.903 
> 
> sendmail("jarecki.jana@gmail.com", subject="Project DI -- Simulation Notification", message="", password="rmail")
[1] "Message was sent to jarecki.jana@gmail.com! You have 19 messages left."
> 

R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## load packages, functions, libraries, parameters
> rm(list=ls(all=T))
> options(warn=-1)
> .libPaths(c("library",.libPaths())) #custom lib path
> # Libs
> library("R.utils")    #integer-binary-conversion
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.6.1 (2014-01-04) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.18.0 (2014-02-22) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, gc, load, save

R.utils v1.34.0 (2014-10-07) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, parse, warnings

> library("data.table") #faster group-wise operations
> library("foreach")    #to run parallel processing
> library("parallel")   #to detect number of cores
> library("mail")       #to send emails from R
> # Srcs
> source("fsim.r")
> source("fprClass.r")
Loading required package: coda
Loading required package: lattice
Loading required package: MASS
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2015 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##
> source("fprModels.r")
> source("flikMLcci.r")
> source("fpresim.r")
> source("fcounts.r")
> 
> 
> # Parameter values
> # doubt/learning = round(exp(seq(0,5,.5)))
> # prior_cci = c(0, 10^-6, seq(.1,.9,.1), .99, 1-10^-6, 1)
> # random seed = 34
> 
> # Experiment switch
> # 1 = Exp. 1; 3 = Exp. 1 when CCI holds
> # 2 = Exp. 2; 4 = Exp. 2 when CCI holds
> which = 4
> 
> ## Parameter
> P = list(
+    e     = which,
+    p_cci = c(0, 10^-6, seq(.1,.9,.1), .99, 1-10^-6, 1),  #prior on CCI
+    delta = round(exp(seq(0,5,.5))),  #conservatism
+    h     = 1,            #initial hyper parameter [scalar]
+    n_r   = 100000,       #number of MC runs
+    s     = 34            #random seed - for replicability
+ )
> sprintf("%.6f",P$p_cci)
 [1] "0.000000" "0.000001" "0.100000" "0.200000" "0.300000" "0.400000"
 [7] "0.500000" "0.600000" "0.700000" "0.800000" "0.900000" "0.990000"
[13] "0.999999" "1.000000"
> 
> ## set paths
> ddir = "//mnt//bigdata//janajaData" # alternative: "../4-Data")
> odir = ddir      #output directory
> cat("odir: ", odir)
odir:  //mnt//bigdata//janajaData> 
> 
> ## assign cpu cores
> nc = detectCores() #number of cores
> 
> ## Platform switch
> if(.Platform$OS.type == "windows"){
+   library("doParallel")
+   cl = makeCluster(nc)
+   registerDoParallel(cl)
+   cat("Registered ", nc, " Cores")
+ } else if(.Platform$OS.type %in% c("mac","unix")){
+   library("doMC")
+   #cl = makeCluster(nc) #dont know if doMC needs this
+   registerDoMC(cores=nc)
+   if(getDoParWorkers()!=nc) { stop("doMC does not work with all cores") }
+   cat("Registered ", nc, " Cores")
+ }
Loading required package: iterators
Registered  16  Cores> 
> 
> 
> ## Data
> # Data to simulate 
> DT = as.data.table(fread(file.path(ddir,paste0("DI",which,"_data.csv")), select=c("i","t","e")))
> setcolorder(DT,c("i","t","e"))
> DT #print 5 rows to check
       i  t    e
   1:  1  1 000A
   2:  1  2 000B
   3:  1  3 001A
   4:  1  4 111A
   5:  1  5 111A
  ---           
1496: 30 46 111A
1497: 30 47 111A
1498: 30 48 000A
1499: 30 49 111A
1500: 30 50 000A
> # Generate counts
> DT = fpresim(DT)
> 
> ## Index data-set by number of cores
> ni    = length(unique(DT$i)) #number of individuals
> ids   = DT[, max(t), by=i][order(V1)]$i #sort sbj. ids by number of trials
> cores = tail(rep(c(1:nc,nc:1),ceiling(ni/nc)),ni) #to assign extreme # of trials to same core: <1,1,2,2,1>
> ids   = lapply(1:nc, function(x) ids[cores==x])
> for (j in 1:nc){  DT[i %in% ids[[j]], "cores" := j] } # variable cores
> setkey(DT,cores,i,t) #sort by cores
> 
> # Paralell processing
> finalRowOrderMatters = FALSE #FALSE can be faster
> system.time(
+   foreach(x = 1:nc, .combine="rbind", .inorder=finalRowOrderMatters) %dopar% {
+     source("fsim.r")
+     source("fprClass.r")
+     source("fprModels.r")
+     source("flikMLcci.r")
+     library("R.utils")
+     library("data.table")
+     RES = fsim(DT[.(x)], P)
+     write.table(RES, file.path(odir,paste(x,".csv",sep="")), row.names=F, sep=";")
+   }
+ )

R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## load packages, functions, libraries, parameters
> rm(list=ls(all=T))
> options(warn=-1)
> .libPaths(c("library",.libPaths())) #custom lib path
> # Libs
> library("R.utils")    #integer-binary-conversion
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.6.1 (2014-01-04) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.18.0 (2014-02-22) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, gc, load, save

R.utils v1.34.0 (2014-10-07) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, parse, warnings

> library("data.table") #faster group-wise operations
> library("foreach")    #to run parallel processing
> library("parallel")   #to detect number of cores
> library("mail")       #to send emails from R
> # Srcs
> source("fsim.r")
> source("fprClass.r")
Loading required package: coda
Loading required package: lattice
Loading required package: MASS
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2015 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##
> source("fprModels.r")
> source("flikMLcci.r")
> source("fpresim.r")
> source("fcounts.r")
> 
> 
> # Parameter values
> # doubt/learning = round(exp(seq(0,5,.5)))
> # prior_cci = c(0, 10^-6, seq(.1,.9,.1), .99, 1-10^-6, 1)
> # random seed = 34
> 
> # Experiment switch
> # 1 = Exp. 1; 3 = Exp. 1 when CCI holds
> # 2 = Exp. 2; 4 = Exp. 2 when CCI holds
> which = 3
> 
> ## Parameter
> P = list(
+    e     = which,
+    p_cci = c(0, 10^-6, seq(.1,.9,.1), .99, 1-10^-6, 1),  #prior on CCI
+    delta = round(exp(seq(0,5,.5))),  #conservatism
+    h     = 1,            #initial hyper parameter [scalar]
+    n_r   = 100000,       #number of MC runs
+    s     = 34            #random seed - for replicability
+ )
> sprintf("%.6f",P$p_cci)
 [1] "0.000000" "0.000001" "0.100000" "0.200000" "0.300000" "0.400000"
 [7] "0.500000" "0.600000" "0.700000" "0.800000" "0.900000" "0.990000"
[13] "0.999999" "1.000000"
> 
> ## set paths
> ddir = "//mnt//bigdata//janajaData" # alternative: "../4-Data")
> odir = ddir      #output directory
> cat("odir: ", odir)
odir:  //mnt//bigdata//janajaData> 
> 
> ## assign cpu cores
> nc = detectCores() #number of cores
> 
> ## Platform switch
> if(.Platform$OS.type == "windows"){
+   library("doParallel")
+   cl = makeCluster(nc)
+   registerDoParallel(cl)
+   cat("Registered ", nc, " Cores")
+ } else if(.Platform$OS.type %in% c("mac","unix")){
+   library("doMC")
+   #cl = makeCluster(nc) #dont know if doMC needs this
+   registerDoMC(cores=nc)
+   if(getDoParWorkers()!=nc) { stop("doMC does not work with all cores") }
+   cat("Registered ", nc, " Cores")
+ }
Loading required package: iterators
Registered  16  Cores> 
> 
> 
> ## Data
> # Data to simulate 
> DT = as.data.table(fread(file.path(ddir,paste0("DI",which,"_data.csv")), select=c("i","t","e")))
> setcolorder(DT,c("i","t","e"))
> DT #print 5 rows to check
       i  t    e
   1:  1  1 110A
   2:  1  2 111B
   3:  1  3 100B
   4:  1  4 011A
   5:  1  5 000B
  ---           
1496: 30 46 000B
1497: 30 47 111A
1498: 30 48 001A
1499: 30 49 101A
1500: 30 50 001A
> # Generate counts
> DT = fpresim(DT)
> 
> ## Index data-set by number of cores
> ni    = length(unique(DT$i)) #number of individuals
> ids   = DT[, max(t), by=i][order(V1)]$i #sort sbj. ids by number of trials
> cores = tail(rep(c(1:nc,nc:1),ceiling(ni/nc)),ni) #to assign extreme # of trials to same core: <1,1,2,2,1>
> ids   = lapply(1:nc, function(x) ids[cores==x])
> for (j in 1:nc){  DT[i %in% ids[[j]], "cores" := j] } # variable cores
> setkey(DT,cores,i,t) #sort by cores
> 
> # Paralell processing
> finalRowOrderMatters = FALSE #FALSE can be faster
> system.time(
+   foreach(x = 1:nc, .combine="rbind", .inorder=finalRowOrderMatters) %dopar% {
+     source("fsim.r")
+     source("fprClass.r")
+     source("fprModels.r")
+     source("flikMLcci.r")
+     library("R.utils")
+     library("data.table")
+     RES = fsim(DT[.(x)], P)
+     write.table(RES, file.path(odir,paste(which,".",x,".csv",sep="")), row.names=F, sep=";")
+   }
+ )
